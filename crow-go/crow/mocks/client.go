// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	http "net/http"

	crow "github.com/crowci/crow/v3/crow-go/crow"

	mock "github.com/stretchr/testify/mock"
)

// Client is an autogenerated mock type for the Client type
type Client struct {
	mock.Mock
}

// Agent provides a mock function with given fields: _a0
func (_m *Client) Agent(_a0 int64) (*crow.Agent, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Agent")
	}

	var r0 *crow.Agent
	var r1 error
	if rf, ok := ret.Get(0).(func(int64) (*crow.Agent, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(int64) *crow.Agent); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*crow.Agent)
		}
	}

	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AgentCreate provides a mock function with given fields: _a0
func (_m *Client) AgentCreate(_a0 *crow.Agent) (*crow.Agent, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for AgentCreate")
	}

	var r0 *crow.Agent
	var r1 error
	if rf, ok := ret.Get(0).(func(*crow.Agent) (*crow.Agent, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*crow.Agent) *crow.Agent); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*crow.Agent)
		}
	}

	if rf, ok := ret.Get(1).(func(*crow.Agent) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AgentDelete provides a mock function with given fields: _a0
func (_m *Client) AgentDelete(_a0 int64) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for AgentDelete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int64) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AgentList provides a mock function with given fields:
func (_m *Client) AgentList() ([]*crow.Agent, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for AgentList")
	}

	var r0 []*crow.Agent
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]*crow.Agent, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []*crow.Agent); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*crow.Agent)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AgentTasksList provides a mock function with given fields: _a0
func (_m *Client) AgentTasksList(_a0 int64) ([]*crow.Task, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for AgentTasksList")
	}

	var r0 []*crow.Task
	var r1 error
	if rf, ok := ret.Get(0).(func(int64) ([]*crow.Task, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(int64) []*crow.Task); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*crow.Task)
		}
	}

	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AgentUpdate provides a mock function with given fields: _a0
func (_m *Client) AgentUpdate(_a0 *crow.Agent) (*crow.Agent, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for AgentUpdate")
	}

	var r0 *crow.Agent
	var r1 error
	if rf, ok := ret.Get(0).(func(*crow.Agent) (*crow.Agent, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*crow.Agent) *crow.Agent); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*crow.Agent)
		}
	}

	if rf, ok := ret.Get(1).(func(*crow.Agent) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CronCreate provides a mock function with given fields: repoID, cron
func (_m *Client) CronCreate(repoID int64, cron *crow.Cron) (*crow.Cron, error) {
	ret := _m.Called(repoID, cron)

	if len(ret) == 0 {
		panic("no return value specified for CronCreate")
	}

	var r0 *crow.Cron
	var r1 error
	if rf, ok := ret.Get(0).(func(int64, *crow.Cron) (*crow.Cron, error)); ok {
		return rf(repoID, cron)
	}
	if rf, ok := ret.Get(0).(func(int64, *crow.Cron) *crow.Cron); ok {
		r0 = rf(repoID, cron)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*crow.Cron)
		}
	}

	if rf, ok := ret.Get(1).(func(int64, *crow.Cron) error); ok {
		r1 = rf(repoID, cron)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CronDelete provides a mock function with given fields: repoID, cronID
func (_m *Client) CronDelete(repoID int64, cronID int64) error {
	ret := _m.Called(repoID, cronID)

	if len(ret) == 0 {
		panic("no return value specified for CronDelete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int64, int64) error); ok {
		r0 = rf(repoID, cronID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CronGet provides a mock function with given fields: repoID, cronID
func (_m *Client) CronGet(repoID int64, cronID int64) (*crow.Cron, error) {
	ret := _m.Called(repoID, cronID)

	if len(ret) == 0 {
		panic("no return value specified for CronGet")
	}

	var r0 *crow.Cron
	var r1 error
	if rf, ok := ret.Get(0).(func(int64, int64) (*crow.Cron, error)); ok {
		return rf(repoID, cronID)
	}
	if rf, ok := ret.Get(0).(func(int64, int64) *crow.Cron); ok {
		r0 = rf(repoID, cronID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*crow.Cron)
		}
	}

	if rf, ok := ret.Get(1).(func(int64, int64) error); ok {
		r1 = rf(repoID, cronID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CronList provides a mock function with given fields: repoID, opt
func (_m *Client) CronList(repoID int64, opt crow.CronListOptions) ([]*crow.Cron, error) {
	ret := _m.Called(repoID, opt)

	if len(ret) == 0 {
		panic("no return value specified for CronList")
	}

	var r0 []*crow.Cron
	var r1 error
	if rf, ok := ret.Get(0).(func(int64, crow.CronListOptions) ([]*crow.Cron, error)); ok {
		return rf(repoID, opt)
	}
	if rf, ok := ret.Get(0).(func(int64, crow.CronListOptions) []*crow.Cron); ok {
		r0 = rf(repoID, opt)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*crow.Cron)
		}
	}

	if rf, ok := ret.Get(1).(func(int64, crow.CronListOptions) error); ok {
		r1 = rf(repoID, opt)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CronUpdate provides a mock function with given fields: repoID, cron
func (_m *Client) CronUpdate(repoID int64, cron *crow.Cron) (*crow.Cron, error) {
	ret := _m.Called(repoID, cron)

	if len(ret) == 0 {
		panic("no return value specified for CronUpdate")
	}

	var r0 *crow.Cron
	var r1 error
	if rf, ok := ret.Get(0).(func(int64, *crow.Cron) (*crow.Cron, error)); ok {
		return rf(repoID, cron)
	}
	if rf, ok := ret.Get(0).(func(int64, *crow.Cron) *crow.Cron); ok {
		r0 = rf(repoID, cron)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*crow.Cron)
		}
	}

	if rf, ok := ret.Get(1).(func(int64, *crow.Cron) error); ok {
		r1 = rf(repoID, cron)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Deploy provides a mock function with given fields: repoID, pipeline, opt
func (_m *Client) Deploy(repoID int64, pipeline int64, opt crow.DeployOptions) (*crow.Pipeline, error) {
	ret := _m.Called(repoID, pipeline, opt)

	if len(ret) == 0 {
		panic("no return value specified for Deploy")
	}

	var r0 *crow.Pipeline
	var r1 error
	if rf, ok := ret.Get(0).(func(int64, int64, crow.DeployOptions) (*crow.Pipeline, error)); ok {
		return rf(repoID, pipeline, opt)
	}
	if rf, ok := ret.Get(0).(func(int64, int64, crow.DeployOptions) *crow.Pipeline); ok {
		r0 = rf(repoID, pipeline, opt)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*crow.Pipeline)
		}
	}

	if rf, ok := ret.Get(1).(func(int64, int64, crow.DeployOptions) error); ok {
		r1 = rf(repoID, pipeline, opt)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GlobalRegistry provides a mock function with given fields: registry
func (_m *Client) GlobalRegistry(registry string) (*crow.Registry, error) {
	ret := _m.Called(registry)

	if len(ret) == 0 {
		panic("no return value specified for GlobalRegistry")
	}

	var r0 *crow.Registry
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*crow.Registry, error)); ok {
		return rf(registry)
	}
	if rf, ok := ret.Get(0).(func(string) *crow.Registry); ok {
		r0 = rf(registry)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*crow.Registry)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(registry)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GlobalRegistryCreate provides a mock function with given fields: registry
func (_m *Client) GlobalRegistryCreate(registry *crow.Registry) (*crow.Registry, error) {
	ret := _m.Called(registry)

	if len(ret) == 0 {
		panic("no return value specified for GlobalRegistryCreate")
	}

	var r0 *crow.Registry
	var r1 error
	if rf, ok := ret.Get(0).(func(*crow.Registry) (*crow.Registry, error)); ok {
		return rf(registry)
	}
	if rf, ok := ret.Get(0).(func(*crow.Registry) *crow.Registry); ok {
		r0 = rf(registry)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*crow.Registry)
		}
	}

	if rf, ok := ret.Get(1).(func(*crow.Registry) error); ok {
		r1 = rf(registry)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GlobalRegistryDelete provides a mock function with given fields: registry
func (_m *Client) GlobalRegistryDelete(registry string) error {
	ret := _m.Called(registry)

	if len(ret) == 0 {
		panic("no return value specified for GlobalRegistryDelete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(registry)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GlobalRegistryList provides a mock function with given fields: opt
func (_m *Client) GlobalRegistryList(opt crow.RegistryListOptions) ([]*crow.Registry, error) {
	ret := _m.Called(opt)

	if len(ret) == 0 {
		panic("no return value specified for GlobalRegistryList")
	}

	var r0 []*crow.Registry
	var r1 error
	if rf, ok := ret.Get(0).(func(crow.RegistryListOptions) ([]*crow.Registry, error)); ok {
		return rf(opt)
	}
	if rf, ok := ret.Get(0).(func(crow.RegistryListOptions) []*crow.Registry); ok {
		r0 = rf(opt)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*crow.Registry)
		}
	}

	if rf, ok := ret.Get(1).(func(crow.RegistryListOptions) error); ok {
		r1 = rf(opt)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GlobalRegistryUpdate provides a mock function with given fields: registry
func (_m *Client) GlobalRegistryUpdate(registry *crow.Registry) (*crow.Registry, error) {
	ret := _m.Called(registry)

	if len(ret) == 0 {
		panic("no return value specified for GlobalRegistryUpdate")
	}

	var r0 *crow.Registry
	var r1 error
	if rf, ok := ret.Get(0).(func(*crow.Registry) (*crow.Registry, error)); ok {
		return rf(registry)
	}
	if rf, ok := ret.Get(0).(func(*crow.Registry) *crow.Registry); ok {
		r0 = rf(registry)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*crow.Registry)
		}
	}

	if rf, ok := ret.Get(1).(func(*crow.Registry) error); ok {
		r1 = rf(registry)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GlobalSecret provides a mock function with given fields: secret
func (_m *Client) GlobalSecret(secret string) (*crow.Secret, error) {
	ret := _m.Called(secret)

	if len(ret) == 0 {
		panic("no return value specified for GlobalSecret")
	}

	var r0 *crow.Secret
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*crow.Secret, error)); ok {
		return rf(secret)
	}
	if rf, ok := ret.Get(0).(func(string) *crow.Secret); ok {
		r0 = rf(secret)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*crow.Secret)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(secret)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GlobalSecretCreate provides a mock function with given fields: secret
func (_m *Client) GlobalSecretCreate(secret *crow.Secret) (*crow.Secret, error) {
	ret := _m.Called(secret)

	if len(ret) == 0 {
		panic("no return value specified for GlobalSecretCreate")
	}

	var r0 *crow.Secret
	var r1 error
	if rf, ok := ret.Get(0).(func(*crow.Secret) (*crow.Secret, error)); ok {
		return rf(secret)
	}
	if rf, ok := ret.Get(0).(func(*crow.Secret) *crow.Secret); ok {
		r0 = rf(secret)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*crow.Secret)
		}
	}

	if rf, ok := ret.Get(1).(func(*crow.Secret) error); ok {
		r1 = rf(secret)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GlobalSecretDelete provides a mock function with given fields: secret
func (_m *Client) GlobalSecretDelete(secret string) error {
	ret := _m.Called(secret)

	if len(ret) == 0 {
		panic("no return value specified for GlobalSecretDelete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(secret)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GlobalSecretList provides a mock function with given fields: opt
func (_m *Client) GlobalSecretList(opt crow.SecretListOptions) ([]*crow.Secret, error) {
	ret := _m.Called(opt)

	if len(ret) == 0 {
		panic("no return value specified for GlobalSecretList")
	}

	var r0 []*crow.Secret
	var r1 error
	if rf, ok := ret.Get(0).(func(crow.SecretListOptions) ([]*crow.Secret, error)); ok {
		return rf(opt)
	}
	if rf, ok := ret.Get(0).(func(crow.SecretListOptions) []*crow.Secret); ok {
		r0 = rf(opt)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*crow.Secret)
		}
	}

	if rf, ok := ret.Get(1).(func(crow.SecretListOptions) error); ok {
		r1 = rf(opt)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GlobalSecretUpdate provides a mock function with given fields: secret
func (_m *Client) GlobalSecretUpdate(secret *crow.Secret) (*crow.Secret, error) {
	ret := _m.Called(secret)

	if len(ret) == 0 {
		panic("no return value specified for GlobalSecretUpdate")
	}

	var r0 *crow.Secret
	var r1 error
	if rf, ok := ret.Get(0).(func(*crow.Secret) (*crow.Secret, error)); ok {
		return rf(secret)
	}
	if rf, ok := ret.Get(0).(func(*crow.Secret) *crow.Secret); ok {
		r0 = rf(secret)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*crow.Secret)
		}
	}

	if rf, ok := ret.Get(1).(func(*crow.Secret) error); ok {
		r1 = rf(secret)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LogLevel provides a mock function with given fields:
func (_m *Client) LogLevel() (*crow.LogLevel, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for LogLevel")
	}

	var r0 *crow.LogLevel
	var r1 error
	if rf, ok := ret.Get(0).(func() (*crow.LogLevel, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *crow.LogLevel); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*crow.LogLevel)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LogsPurge provides a mock function with given fields: repoID, pipeline
func (_m *Client) LogsPurge(repoID int64, pipeline int64) error {
	ret := _m.Called(repoID, pipeline)

	if len(ret) == 0 {
		panic("no return value specified for LogsPurge")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int64, int64) error); ok {
		r0 = rf(repoID, pipeline)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Org provides a mock function with given fields: orgID
func (_m *Client) Org(orgID int64) (*crow.Org, error) {
	ret := _m.Called(orgID)

	if len(ret) == 0 {
		panic("no return value specified for Org")
	}

	var r0 *crow.Org
	var r1 error
	if rf, ok := ret.Get(0).(func(int64) (*crow.Org, error)); ok {
		return rf(orgID)
	}
	if rf, ok := ret.Get(0).(func(int64) *crow.Org); ok {
		r0 = rf(orgID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*crow.Org)
		}
	}

	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(orgID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OrgLookup provides a mock function with given fields: orgName
func (_m *Client) OrgLookup(orgName string) (*crow.Org, error) {
	ret := _m.Called(orgName)

	if len(ret) == 0 {
		panic("no return value specified for OrgLookup")
	}

	var r0 *crow.Org
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*crow.Org, error)); ok {
		return rf(orgName)
	}
	if rf, ok := ret.Get(0).(func(string) *crow.Org); ok {
		r0 = rf(orgName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*crow.Org)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(orgName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OrgRegistry provides a mock function with given fields: orgID, registry
func (_m *Client) OrgRegistry(orgID int64, registry string) (*crow.Registry, error) {
	ret := _m.Called(orgID, registry)

	if len(ret) == 0 {
		panic("no return value specified for OrgRegistry")
	}

	var r0 *crow.Registry
	var r1 error
	if rf, ok := ret.Get(0).(func(int64, string) (*crow.Registry, error)); ok {
		return rf(orgID, registry)
	}
	if rf, ok := ret.Get(0).(func(int64, string) *crow.Registry); ok {
		r0 = rf(orgID, registry)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*crow.Registry)
		}
	}

	if rf, ok := ret.Get(1).(func(int64, string) error); ok {
		r1 = rf(orgID, registry)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OrgRegistryCreate provides a mock function with given fields: orgID, registry
func (_m *Client) OrgRegistryCreate(orgID int64, registry *crow.Registry) (*crow.Registry, error) {
	ret := _m.Called(orgID, registry)

	if len(ret) == 0 {
		panic("no return value specified for OrgRegistryCreate")
	}

	var r0 *crow.Registry
	var r1 error
	if rf, ok := ret.Get(0).(func(int64, *crow.Registry) (*crow.Registry, error)); ok {
		return rf(orgID, registry)
	}
	if rf, ok := ret.Get(0).(func(int64, *crow.Registry) *crow.Registry); ok {
		r0 = rf(orgID, registry)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*crow.Registry)
		}
	}

	if rf, ok := ret.Get(1).(func(int64, *crow.Registry) error); ok {
		r1 = rf(orgID, registry)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OrgRegistryDelete provides a mock function with given fields: orgID, registry
func (_m *Client) OrgRegistryDelete(orgID int64, registry string) error {
	ret := _m.Called(orgID, registry)

	if len(ret) == 0 {
		panic("no return value specified for OrgRegistryDelete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int64, string) error); ok {
		r0 = rf(orgID, registry)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// OrgRegistryList provides a mock function with given fields: orgID, opt
func (_m *Client) OrgRegistryList(orgID int64, opt crow.RegistryListOptions) ([]*crow.Registry, error) {
	ret := _m.Called(orgID, opt)

	if len(ret) == 0 {
		panic("no return value specified for OrgRegistryList")
	}

	var r0 []*crow.Registry
	var r1 error
	if rf, ok := ret.Get(0).(func(int64, crow.RegistryListOptions) ([]*crow.Registry, error)); ok {
		return rf(orgID, opt)
	}
	if rf, ok := ret.Get(0).(func(int64, crow.RegistryListOptions) []*crow.Registry); ok {
		r0 = rf(orgID, opt)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*crow.Registry)
		}
	}

	if rf, ok := ret.Get(1).(func(int64, crow.RegistryListOptions) error); ok {
		r1 = rf(orgID, opt)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OrgRegistryUpdate provides a mock function with given fields: orgID, registry
func (_m *Client) OrgRegistryUpdate(orgID int64, registry *crow.Registry) (*crow.Registry, error) {
	ret := _m.Called(orgID, registry)

	if len(ret) == 0 {
		panic("no return value specified for OrgRegistryUpdate")
	}

	var r0 *crow.Registry
	var r1 error
	if rf, ok := ret.Get(0).(func(int64, *crow.Registry) (*crow.Registry, error)); ok {
		return rf(orgID, registry)
	}
	if rf, ok := ret.Get(0).(func(int64, *crow.Registry) *crow.Registry); ok {
		r0 = rf(orgID, registry)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*crow.Registry)
		}
	}

	if rf, ok := ret.Get(1).(func(int64, *crow.Registry) error); ok {
		r1 = rf(orgID, registry)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OrgSecret provides a mock function with given fields: orgID, secret
func (_m *Client) OrgSecret(orgID int64, secret string) (*crow.Secret, error) {
	ret := _m.Called(orgID, secret)

	if len(ret) == 0 {
		panic("no return value specified for OrgSecret")
	}

	var r0 *crow.Secret
	var r1 error
	if rf, ok := ret.Get(0).(func(int64, string) (*crow.Secret, error)); ok {
		return rf(orgID, secret)
	}
	if rf, ok := ret.Get(0).(func(int64, string) *crow.Secret); ok {
		r0 = rf(orgID, secret)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*crow.Secret)
		}
	}

	if rf, ok := ret.Get(1).(func(int64, string) error); ok {
		r1 = rf(orgID, secret)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OrgSecretCreate provides a mock function with given fields: orgID, secret
func (_m *Client) OrgSecretCreate(orgID int64, secret *crow.Secret) (*crow.Secret, error) {
	ret := _m.Called(orgID, secret)

	if len(ret) == 0 {
		panic("no return value specified for OrgSecretCreate")
	}

	var r0 *crow.Secret
	var r1 error
	if rf, ok := ret.Get(0).(func(int64, *crow.Secret) (*crow.Secret, error)); ok {
		return rf(orgID, secret)
	}
	if rf, ok := ret.Get(0).(func(int64, *crow.Secret) *crow.Secret); ok {
		r0 = rf(orgID, secret)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*crow.Secret)
		}
	}

	if rf, ok := ret.Get(1).(func(int64, *crow.Secret) error); ok {
		r1 = rf(orgID, secret)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OrgSecretDelete provides a mock function with given fields: orgID, secret
func (_m *Client) OrgSecretDelete(orgID int64, secret string) error {
	ret := _m.Called(orgID, secret)

	if len(ret) == 0 {
		panic("no return value specified for OrgSecretDelete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int64, string) error); ok {
		r0 = rf(orgID, secret)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// OrgSecretList provides a mock function with given fields: orgID, opt
func (_m *Client) OrgSecretList(orgID int64, opt crow.SecretListOptions) ([]*crow.Secret, error) {
	ret := _m.Called(orgID, opt)

	if len(ret) == 0 {
		panic("no return value specified for OrgSecretList")
	}

	var r0 []*crow.Secret
	var r1 error
	if rf, ok := ret.Get(0).(func(int64, crow.SecretListOptions) ([]*crow.Secret, error)); ok {
		return rf(orgID, opt)
	}
	if rf, ok := ret.Get(0).(func(int64, crow.SecretListOptions) []*crow.Secret); ok {
		r0 = rf(orgID, opt)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*crow.Secret)
		}
	}

	if rf, ok := ret.Get(1).(func(int64, crow.SecretListOptions) error); ok {
		r1 = rf(orgID, opt)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OrgSecretUpdate provides a mock function with given fields: orgID, secret
func (_m *Client) OrgSecretUpdate(orgID int64, secret *crow.Secret) (*crow.Secret, error) {
	ret := _m.Called(orgID, secret)

	if len(ret) == 0 {
		panic("no return value specified for OrgSecretUpdate")
	}

	var r0 *crow.Secret
	var r1 error
	if rf, ok := ret.Get(0).(func(int64, *crow.Secret) (*crow.Secret, error)); ok {
		return rf(orgID, secret)
	}
	if rf, ok := ret.Get(0).(func(int64, *crow.Secret) *crow.Secret); ok {
		r0 = rf(orgID, secret)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*crow.Secret)
		}
	}

	if rf, ok := ret.Get(1).(func(int64, *crow.Secret) error); ok {
		r1 = rf(orgID, secret)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Pipeline provides a mock function with given fields: repoID, pipeline
func (_m *Client) Pipeline(repoID int64, pipeline int64) (*crow.Pipeline, error) {
	ret := _m.Called(repoID, pipeline)

	if len(ret) == 0 {
		panic("no return value specified for Pipeline")
	}

	var r0 *crow.Pipeline
	var r1 error
	if rf, ok := ret.Get(0).(func(int64, int64) (*crow.Pipeline, error)); ok {
		return rf(repoID, pipeline)
	}
	if rf, ok := ret.Get(0).(func(int64, int64) *crow.Pipeline); ok {
		r0 = rf(repoID, pipeline)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*crow.Pipeline)
		}
	}

	if rf, ok := ret.Get(1).(func(int64, int64) error); ok {
		r1 = rf(repoID, pipeline)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PipelineApprove provides a mock function with given fields: repoID, pipeline
func (_m *Client) PipelineApprove(repoID int64, pipeline int64) (*crow.Pipeline, error) {
	ret := _m.Called(repoID, pipeline)

	if len(ret) == 0 {
		panic("no return value specified for PipelineApprove")
	}

	var r0 *crow.Pipeline
	var r1 error
	if rf, ok := ret.Get(0).(func(int64, int64) (*crow.Pipeline, error)); ok {
		return rf(repoID, pipeline)
	}
	if rf, ok := ret.Get(0).(func(int64, int64) *crow.Pipeline); ok {
		r0 = rf(repoID, pipeline)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*crow.Pipeline)
		}
	}

	if rf, ok := ret.Get(1).(func(int64, int64) error); ok {
		r1 = rf(repoID, pipeline)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PipelineCreate provides a mock function with given fields: repoID, opts
func (_m *Client) PipelineCreate(repoID int64, opts *crow.PipelineOptions) (*crow.Pipeline, error) {
	ret := _m.Called(repoID, opts)

	if len(ret) == 0 {
		panic("no return value specified for PipelineCreate")
	}

	var r0 *crow.Pipeline
	var r1 error
	if rf, ok := ret.Get(0).(func(int64, *crow.PipelineOptions) (*crow.Pipeline, error)); ok {
		return rf(repoID, opts)
	}
	if rf, ok := ret.Get(0).(func(int64, *crow.PipelineOptions) *crow.Pipeline); ok {
		r0 = rf(repoID, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*crow.Pipeline)
		}
	}

	if rf, ok := ret.Get(1).(func(int64, *crow.PipelineOptions) error); ok {
		r1 = rf(repoID, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PipelineDecline provides a mock function with given fields: repoID, pipeline
func (_m *Client) PipelineDecline(repoID int64, pipeline int64) (*crow.Pipeline, error) {
	ret := _m.Called(repoID, pipeline)

	if len(ret) == 0 {
		panic("no return value specified for PipelineDecline")
	}

	var r0 *crow.Pipeline
	var r1 error
	if rf, ok := ret.Get(0).(func(int64, int64) (*crow.Pipeline, error)); ok {
		return rf(repoID, pipeline)
	}
	if rf, ok := ret.Get(0).(func(int64, int64) *crow.Pipeline); ok {
		r0 = rf(repoID, pipeline)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*crow.Pipeline)
		}
	}

	if rf, ok := ret.Get(1).(func(int64, int64) error); ok {
		r1 = rf(repoID, pipeline)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PipelineDelete provides a mock function with given fields: repoID, pipeline
func (_m *Client) PipelineDelete(repoID int64, pipeline int64) error {
	ret := _m.Called(repoID, pipeline)

	if len(ret) == 0 {
		panic("no return value specified for PipelineDelete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int64, int64) error); ok {
		r0 = rf(repoID, pipeline)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PipelineLast provides a mock function with given fields: repoID, opt
func (_m *Client) PipelineLast(repoID int64, opt crow.PipelineLastOptions) (*crow.Pipeline, error) {
	ret := _m.Called(repoID, opt)

	if len(ret) == 0 {
		panic("no return value specified for PipelineLast")
	}

	var r0 *crow.Pipeline
	var r1 error
	if rf, ok := ret.Get(0).(func(int64, crow.PipelineLastOptions) (*crow.Pipeline, error)); ok {
		return rf(repoID, opt)
	}
	if rf, ok := ret.Get(0).(func(int64, crow.PipelineLastOptions) *crow.Pipeline); ok {
		r0 = rf(repoID, opt)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*crow.Pipeline)
		}
	}

	if rf, ok := ret.Get(1).(func(int64, crow.PipelineLastOptions) error); ok {
		r1 = rf(repoID, opt)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PipelineList provides a mock function with given fields: repoID, opt
func (_m *Client) PipelineList(repoID int64, opt crow.PipelineListOptions) ([]*crow.Pipeline, error) {
	ret := _m.Called(repoID, opt)

	if len(ret) == 0 {
		panic("no return value specified for PipelineList")
	}

	var r0 []*crow.Pipeline
	var r1 error
	if rf, ok := ret.Get(0).(func(int64, crow.PipelineListOptions) ([]*crow.Pipeline, error)); ok {
		return rf(repoID, opt)
	}
	if rf, ok := ret.Get(0).(func(int64, crow.PipelineListOptions) []*crow.Pipeline); ok {
		r0 = rf(repoID, opt)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*crow.Pipeline)
		}
	}

	if rf, ok := ret.Get(1).(func(int64, crow.PipelineListOptions) error); ok {
		r1 = rf(repoID, opt)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PipelineMetadata provides a mock function with given fields: repoID, pipelineNumber
func (_m *Client) PipelineMetadata(repoID int64, pipelineNumber int) ([]byte, error) {
	ret := _m.Called(repoID, pipelineNumber)

	if len(ret) == 0 {
		panic("no return value specified for PipelineMetadata")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(int64, int) ([]byte, error)); ok {
		return rf(repoID, pipelineNumber)
	}
	if rf, ok := ret.Get(0).(func(int64, int) []byte); ok {
		r0 = rf(repoID, pipelineNumber)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(int64, int) error); ok {
		r1 = rf(repoID, pipelineNumber)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PipelineQueue provides a mock function with given fields:
func (_m *Client) PipelineQueue() ([]*crow.Feed, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for PipelineQueue")
	}

	var r0 []*crow.Feed
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]*crow.Feed, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []*crow.Feed); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*crow.Feed)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PipelineStart provides a mock function with given fields: repoID, num, opt
func (_m *Client) PipelineStart(repoID int64, num int64, opt crow.PipelineStartOptions) (*crow.Pipeline, error) {
	ret := _m.Called(repoID, num, opt)

	if len(ret) == 0 {
		panic("no return value specified for PipelineStart")
	}

	var r0 *crow.Pipeline
	var r1 error
	if rf, ok := ret.Get(0).(func(int64, int64, crow.PipelineStartOptions) (*crow.Pipeline, error)); ok {
		return rf(repoID, num, opt)
	}
	if rf, ok := ret.Get(0).(func(int64, int64, crow.PipelineStartOptions) *crow.Pipeline); ok {
		r0 = rf(repoID, num, opt)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*crow.Pipeline)
		}
	}

	if rf, ok := ret.Get(1).(func(int64, int64, crow.PipelineStartOptions) error); ok {
		r1 = rf(repoID, num, opt)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PipelineStop provides a mock function with given fields: repoID, pipeline
func (_m *Client) PipelineStop(repoID int64, pipeline int64) error {
	ret := _m.Called(repoID, pipeline)

	if len(ret) == 0 {
		panic("no return value specified for PipelineStop")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int64, int64) error); ok {
		r0 = rf(repoID, pipeline)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// QueueInfo provides a mock function with given fields:
func (_m *Client) QueueInfo() (*crow.Info, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for QueueInfo")
	}

	var r0 *crow.Info
	var r1 error
	if rf, ok := ret.Get(0).(func() (*crow.Info, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *crow.Info); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*crow.Info)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Registry provides a mock function with given fields: repoID, hostname
func (_m *Client) Registry(repoID int64, hostname string) (*crow.Registry, error) {
	ret := _m.Called(repoID, hostname)

	if len(ret) == 0 {
		panic("no return value specified for Registry")
	}

	var r0 *crow.Registry
	var r1 error
	if rf, ok := ret.Get(0).(func(int64, string) (*crow.Registry, error)); ok {
		return rf(repoID, hostname)
	}
	if rf, ok := ret.Get(0).(func(int64, string) *crow.Registry); ok {
		r0 = rf(repoID, hostname)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*crow.Registry)
		}
	}

	if rf, ok := ret.Get(1).(func(int64, string) error); ok {
		r1 = rf(repoID, hostname)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RegistryCreate provides a mock function with given fields: repoID, registry
func (_m *Client) RegistryCreate(repoID int64, registry *crow.Registry) (*crow.Registry, error) {
	ret := _m.Called(repoID, registry)

	if len(ret) == 0 {
		panic("no return value specified for RegistryCreate")
	}

	var r0 *crow.Registry
	var r1 error
	if rf, ok := ret.Get(0).(func(int64, *crow.Registry) (*crow.Registry, error)); ok {
		return rf(repoID, registry)
	}
	if rf, ok := ret.Get(0).(func(int64, *crow.Registry) *crow.Registry); ok {
		r0 = rf(repoID, registry)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*crow.Registry)
		}
	}

	if rf, ok := ret.Get(1).(func(int64, *crow.Registry) error); ok {
		r1 = rf(repoID, registry)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RegistryDelete provides a mock function with given fields: repoID, hostname
func (_m *Client) RegistryDelete(repoID int64, hostname string) error {
	ret := _m.Called(repoID, hostname)

	if len(ret) == 0 {
		panic("no return value specified for RegistryDelete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int64, string) error); ok {
		r0 = rf(repoID, hostname)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RegistryList provides a mock function with given fields: repoID, opt
func (_m *Client) RegistryList(repoID int64, opt crow.RegistryListOptions) ([]*crow.Registry, error) {
	ret := _m.Called(repoID, opt)

	if len(ret) == 0 {
		panic("no return value specified for RegistryList")
	}

	var r0 []*crow.Registry
	var r1 error
	if rf, ok := ret.Get(0).(func(int64, crow.RegistryListOptions) ([]*crow.Registry, error)); ok {
		return rf(repoID, opt)
	}
	if rf, ok := ret.Get(0).(func(int64, crow.RegistryListOptions) []*crow.Registry); ok {
		r0 = rf(repoID, opt)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*crow.Registry)
		}
	}

	if rf, ok := ret.Get(1).(func(int64, crow.RegistryListOptions) error); ok {
		r1 = rf(repoID, opt)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RegistryUpdate provides a mock function with given fields: repoID, registry
func (_m *Client) RegistryUpdate(repoID int64, registry *crow.Registry) (*crow.Registry, error) {
	ret := _m.Called(repoID, registry)

	if len(ret) == 0 {
		panic("no return value specified for RegistryUpdate")
	}

	var r0 *crow.Registry
	var r1 error
	if rf, ok := ret.Get(0).(func(int64, *crow.Registry) (*crow.Registry, error)); ok {
		return rf(repoID, registry)
	}
	if rf, ok := ret.Get(0).(func(int64, *crow.Registry) *crow.Registry); ok {
		r0 = rf(repoID, registry)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*crow.Registry)
		}
	}

	if rf, ok := ret.Get(1).(func(int64, *crow.Registry) error); ok {
		r1 = rf(repoID, registry)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Repo provides a mock function with given fields: repoID
func (_m *Client) Repo(repoID int64) (*crow.Repo, error) {
	ret := _m.Called(repoID)

	if len(ret) == 0 {
		panic("no return value specified for Repo")
	}

	var r0 *crow.Repo
	var r1 error
	if rf, ok := ret.Get(0).(func(int64) (*crow.Repo, error)); ok {
		return rf(repoID)
	}
	if rf, ok := ret.Get(0).(func(int64) *crow.Repo); ok {
		r0 = rf(repoID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*crow.Repo)
		}
	}

	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(repoID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RepoChown provides a mock function with given fields: repoID
func (_m *Client) RepoChown(repoID int64) (*crow.Repo, error) {
	ret := _m.Called(repoID)

	if len(ret) == 0 {
		panic("no return value specified for RepoChown")
	}

	var r0 *crow.Repo
	var r1 error
	if rf, ok := ret.Get(0).(func(int64) (*crow.Repo, error)); ok {
		return rf(repoID)
	}
	if rf, ok := ret.Get(0).(func(int64) *crow.Repo); ok {
		r0 = rf(repoID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*crow.Repo)
		}
	}

	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(repoID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RepoDel provides a mock function with given fields: repoID
func (_m *Client) RepoDel(repoID int64) error {
	ret := _m.Called(repoID)

	if len(ret) == 0 {
		panic("no return value specified for RepoDel")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int64) error); ok {
		r0 = rf(repoID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RepoList provides a mock function with given fields: opt
func (_m *Client) RepoList(opt crow.RepoListOptions) ([]*crow.Repo, error) {
	ret := _m.Called(opt)

	if len(ret) == 0 {
		panic("no return value specified for RepoList")
	}

	var r0 []*crow.Repo
	var r1 error
	if rf, ok := ret.Get(0).(func(crow.RepoListOptions) ([]*crow.Repo, error)); ok {
		return rf(opt)
	}
	if rf, ok := ret.Get(0).(func(crow.RepoListOptions) []*crow.Repo); ok {
		r0 = rf(opt)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*crow.Repo)
		}
	}

	if rf, ok := ret.Get(1).(func(crow.RepoListOptions) error); ok {
		r1 = rf(opt)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RepoLookup provides a mock function with given fields: repoFullName
func (_m *Client) RepoLookup(repoFullName string) (*crow.Repo, error) {
	ret := _m.Called(repoFullName)

	if len(ret) == 0 {
		panic("no return value specified for RepoLookup")
	}

	var r0 *crow.Repo
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*crow.Repo, error)); ok {
		return rf(repoFullName)
	}
	if rf, ok := ret.Get(0).(func(string) *crow.Repo); ok {
		r0 = rf(repoFullName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*crow.Repo)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(repoFullName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RepoMove provides a mock function with given fields: repoID, opt
func (_m *Client) RepoMove(repoID int64, opt crow.RepoMoveOptions) error {
	ret := _m.Called(repoID, opt)

	if len(ret) == 0 {
		panic("no return value specified for RepoMove")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int64, crow.RepoMoveOptions) error); ok {
		r0 = rf(repoID, opt)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RepoPatch provides a mock function with given fields: repoID, repo
func (_m *Client) RepoPatch(repoID int64, repo *crow.RepoPatch) (*crow.Repo, error) {
	ret := _m.Called(repoID, repo)

	if len(ret) == 0 {
		panic("no return value specified for RepoPatch")
	}

	var r0 *crow.Repo
	var r1 error
	if rf, ok := ret.Get(0).(func(int64, *crow.RepoPatch) (*crow.Repo, error)); ok {
		return rf(repoID, repo)
	}
	if rf, ok := ret.Get(0).(func(int64, *crow.RepoPatch) *crow.Repo); ok {
		r0 = rf(repoID, repo)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*crow.Repo)
		}
	}

	if rf, ok := ret.Get(1).(func(int64, *crow.RepoPatch) error); ok {
		r1 = rf(repoID, repo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RepoPost provides a mock function with given fields: opt
func (_m *Client) RepoPost(opt crow.RepoPostOptions) (*crow.Repo, error) {
	ret := _m.Called(opt)

	if len(ret) == 0 {
		panic("no return value specified for RepoPost")
	}

	var r0 *crow.Repo
	var r1 error
	if rf, ok := ret.Get(0).(func(crow.RepoPostOptions) (*crow.Repo, error)); ok {
		return rf(opt)
	}
	if rf, ok := ret.Get(0).(func(crow.RepoPostOptions) *crow.Repo); ok {
		r0 = rf(opt)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*crow.Repo)
		}
	}

	if rf, ok := ret.Get(1).(func(crow.RepoPostOptions) error); ok {
		r1 = rf(opt)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RepoRepair provides a mock function with given fields: repoID
func (_m *Client) RepoRepair(repoID int64) error {
	ret := _m.Called(repoID)

	if len(ret) == 0 {
		panic("no return value specified for RepoRepair")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int64) error); ok {
		r0 = rf(repoID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Secret provides a mock function with given fields: repoID, secret
func (_m *Client) Secret(repoID int64, secret string) (*crow.Secret, error) {
	ret := _m.Called(repoID, secret)

	if len(ret) == 0 {
		panic("no return value specified for Secret")
	}

	var r0 *crow.Secret
	var r1 error
	if rf, ok := ret.Get(0).(func(int64, string) (*crow.Secret, error)); ok {
		return rf(repoID, secret)
	}
	if rf, ok := ret.Get(0).(func(int64, string) *crow.Secret); ok {
		r0 = rf(repoID, secret)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*crow.Secret)
		}
	}

	if rf, ok := ret.Get(1).(func(int64, string) error); ok {
		r1 = rf(repoID, secret)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SecretCreate provides a mock function with given fields: repoID, secret
func (_m *Client) SecretCreate(repoID int64, secret *crow.Secret) (*crow.Secret, error) {
	ret := _m.Called(repoID, secret)

	if len(ret) == 0 {
		panic("no return value specified for SecretCreate")
	}

	var r0 *crow.Secret
	var r1 error
	if rf, ok := ret.Get(0).(func(int64, *crow.Secret) (*crow.Secret, error)); ok {
		return rf(repoID, secret)
	}
	if rf, ok := ret.Get(0).(func(int64, *crow.Secret) *crow.Secret); ok {
		r0 = rf(repoID, secret)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*crow.Secret)
		}
	}

	if rf, ok := ret.Get(1).(func(int64, *crow.Secret) error); ok {
		r1 = rf(repoID, secret)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SecretDelete provides a mock function with given fields: repoID, secret
func (_m *Client) SecretDelete(repoID int64, secret string) error {
	ret := _m.Called(repoID, secret)

	if len(ret) == 0 {
		panic("no return value specified for SecretDelete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int64, string) error); ok {
		r0 = rf(repoID, secret)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SecretList provides a mock function with given fields: repoID, opt
func (_m *Client) SecretList(repoID int64, opt crow.SecretListOptions) ([]*crow.Secret, error) {
	ret := _m.Called(repoID, opt)

	if len(ret) == 0 {
		panic("no return value specified for SecretList")
	}

	var r0 []*crow.Secret
	var r1 error
	if rf, ok := ret.Get(0).(func(int64, crow.SecretListOptions) ([]*crow.Secret, error)); ok {
		return rf(repoID, opt)
	}
	if rf, ok := ret.Get(0).(func(int64, crow.SecretListOptions) []*crow.Secret); ok {
		r0 = rf(repoID, opt)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*crow.Secret)
		}
	}

	if rf, ok := ret.Get(1).(func(int64, crow.SecretListOptions) error); ok {
		r1 = rf(repoID, opt)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SecretUpdate provides a mock function with given fields: repoID, secret
func (_m *Client) SecretUpdate(repoID int64, secret *crow.Secret) (*crow.Secret, error) {
	ret := _m.Called(repoID, secret)

	if len(ret) == 0 {
		panic("no return value specified for SecretUpdate")
	}

	var r0 *crow.Secret
	var r1 error
	if rf, ok := ret.Get(0).(func(int64, *crow.Secret) (*crow.Secret, error)); ok {
		return rf(repoID, secret)
	}
	if rf, ok := ret.Get(0).(func(int64, *crow.Secret) *crow.Secret); ok {
		r0 = rf(repoID, secret)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*crow.Secret)
		}
	}

	if rf, ok := ret.Get(1).(func(int64, *crow.Secret) error); ok {
		r1 = rf(repoID, secret)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Self provides a mock function with given fields:
func (_m *Client) Self() (*crow.User, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Self")
	}

	var r0 *crow.User
	var r1 error
	if rf, ok := ret.Get(0).(func() (*crow.User, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *crow.User); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*crow.User)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetAddress provides a mock function with given fields: _a0
func (_m *Client) SetAddress(_a0 string) {
	_m.Called(_a0)
}

// SetClient provides a mock function with given fields: _a0
func (_m *Client) SetClient(_a0 *http.Client) {
	_m.Called(_a0)
}

// SetLogLevel provides a mock function with given fields: logLevel
func (_m *Client) SetLogLevel(logLevel *crow.LogLevel) (*crow.LogLevel, error) {
	ret := _m.Called(logLevel)

	if len(ret) == 0 {
		panic("no return value specified for SetLogLevel")
	}

	var r0 *crow.LogLevel
	var r1 error
	if rf, ok := ret.Get(0).(func(*crow.LogLevel) (*crow.LogLevel, error)); ok {
		return rf(logLevel)
	}
	if rf, ok := ret.Get(0).(func(*crow.LogLevel) *crow.LogLevel); ok {
		r0 = rf(logLevel)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*crow.LogLevel)
		}
	}

	if rf, ok := ret.Get(1).(func(*crow.LogLevel) error); ok {
		r1 = rf(logLevel)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StepLogEntries provides a mock function with given fields: repoID, pipeline, stepID
func (_m *Client) StepLogEntries(repoID int64, pipeline int64, stepID int64) ([]*crow.LogEntry, error) {
	ret := _m.Called(repoID, pipeline, stepID)

	if len(ret) == 0 {
		panic("no return value specified for StepLogEntries")
	}

	var r0 []*crow.LogEntry
	var r1 error
	if rf, ok := ret.Get(0).(func(int64, int64, int64) ([]*crow.LogEntry, error)); ok {
		return rf(repoID, pipeline, stepID)
	}
	if rf, ok := ret.Get(0).(func(int64, int64, int64) []*crow.LogEntry); ok {
		r0 = rf(repoID, pipeline, stepID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*crow.LogEntry)
		}
	}

	if rf, ok := ret.Get(1).(func(int64, int64, int64) error); ok {
		r1 = rf(repoID, pipeline, stepID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StepLogsPurge provides a mock function with given fields: repoID, pipelineNumber, stepID
func (_m *Client) StepLogsPurge(repoID int64, pipelineNumber int64, stepID int64) error {
	ret := _m.Called(repoID, pipelineNumber, stepID)

	if len(ret) == 0 {
		panic("no return value specified for StepLogsPurge")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int64, int64, int64) error); ok {
		r0 = rf(repoID, pipelineNumber, stepID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// User provides a mock function with given fields: _a0
func (_m *Client) User(_a0 string) (*crow.User, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for User")
	}

	var r0 *crow.User
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*crow.User, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(string) *crow.User); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*crow.User)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserDel provides a mock function with given fields: _a0
func (_m *Client) UserDel(_a0 string) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for UserDel")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UserList provides a mock function with given fields: opt
func (_m *Client) UserList(opt crow.UserListOptions) ([]*crow.User, error) {
	ret := _m.Called(opt)

	if len(ret) == 0 {
		panic("no return value specified for UserList")
	}

	var r0 []*crow.User
	var r1 error
	if rf, ok := ret.Get(0).(func(crow.UserListOptions) ([]*crow.User, error)); ok {
		return rf(opt)
	}
	if rf, ok := ret.Get(0).(func(crow.UserListOptions) []*crow.User); ok {
		r0 = rf(opt)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*crow.User)
		}
	}

	if rf, ok := ret.Get(1).(func(crow.UserListOptions) error); ok {
		r1 = rf(opt)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserPatch provides a mock function with given fields: _a0
func (_m *Client) UserPatch(_a0 *crow.User) (*crow.User, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for UserPatch")
	}

	var r0 *crow.User
	var r1 error
	if rf, ok := ret.Get(0).(func(*crow.User) (*crow.User, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*crow.User) *crow.User); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*crow.User)
		}
	}

	if rf, ok := ret.Get(1).(func(*crow.User) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserPost provides a mock function with given fields: _a0
func (_m *Client) UserPost(_a0 *crow.User) (*crow.User, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for UserPost")
	}

	var r0 *crow.User
	var r1 error
	if rf, ok := ret.Get(0).(func(*crow.User) (*crow.User, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*crow.User) *crow.User); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*crow.User)
		}
	}

	if rf, ok := ret.Get(1).(func(*crow.User) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewClient creates a new instance of Client. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *Client {
	mock := &Client{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
