// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	model "github.com/crowci/crow/v3/server/model"
	mock "github.com/stretchr/testify/mock"
)

// ReadOnlyService is an autogenerated mock type for the ReadOnlyService type
type ReadOnlyService struct {
	mock.Mock
}

// GlobalRegistryFind provides a mock function with given fields: _a0
func (_m *ReadOnlyService) GlobalRegistryFind(_a0 string) (*model.Registry, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GlobalRegistryFind")
	}

	var r0 *model.Registry
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*model.Registry, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(string) *model.Registry); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Registry)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GlobalRegistryList provides a mock function with given fields: _a0
func (_m *ReadOnlyService) GlobalRegistryList(_a0 *model.ListOptions) ([]*model.Registry, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GlobalRegistryList")
	}

	var r0 []*model.Registry
	var r1 error
	if rf, ok := ret.Get(0).(func(*model.ListOptions) ([]*model.Registry, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*model.ListOptions) []*model.Registry); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Registry)
		}
	}

	if rf, ok := ret.Get(1).(func(*model.ListOptions) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewReadOnlyService creates a new instance of ReadOnlyService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewReadOnlyService(t interface {
	mock.TestingT
	Cleanup(func())
}) *ReadOnlyService {
	mock := &ReadOnlyService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
