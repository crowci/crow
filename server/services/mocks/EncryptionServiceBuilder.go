// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	types "github.com/crowci/crow/v3/server/services/encryption/types"
	mock "github.com/stretchr/testify/mock"
)

// EncryptionServiceBuilder is an autogenerated mock type for the EncryptionServiceBuilder type
type EncryptionServiceBuilder struct {
	mock.Mock
}

// Build provides a mock function with given fields:
func (_m *EncryptionServiceBuilder) Build() (types.EncryptionService, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Build")
	}

	var r0 types.EncryptionService
	var r1 error
	if rf, ok := ret.Get(0).(func() (types.EncryptionService, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() types.EncryptionService); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(types.EncryptionService)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WithClients provides a mock function with given fields: clients
func (_m *EncryptionServiceBuilder) WithClients(clients []types.EncryptionClient) types.EncryptionServiceBuilder {
	ret := _m.Called(clients)

	if len(ret) == 0 {
		panic("no return value specified for WithClients")
	}

	var r0 types.EncryptionServiceBuilder
	if rf, ok := ret.Get(0).(func([]types.EncryptionClient) types.EncryptionServiceBuilder); ok {
		r0 = rf(clients)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(types.EncryptionServiceBuilder)
		}
	}

	return r0
}

// NewEncryptionServiceBuilder creates a new instance of EncryptionServiceBuilder. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewEncryptionServiceBuilder(t interface {
	mock.TestingT
	Cleanup(func())
}) *EncryptionServiceBuilder {
	mock := &EncryptionServiceBuilder{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
