// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	forge "github.com/crowci/crow/v3/server/forge"
	mock "github.com/stretchr/testify/mock"

	model "github.com/crowci/crow/v3/server/model"
)

// SetupForge is an autogenerated mock type for the SetupForge type
type SetupForge struct {
	mock.Mock
}

// Execute provides a mock function with given fields: _a0
func (_m *SetupForge) Execute(_a0 *model.Forge) (forge.Forge, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Execute")
	}

	var r0 forge.Forge
	var r1 error
	if rf, ok := ret.Get(0).(func(*model.Forge) (forge.Forge, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*model.Forge) forge.Forge); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(forge.Forge)
		}
	}

	if rf, ok := ret.Get(1).(func(*model.Forge) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewSetupForge creates a new instance of SetupForge. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSetupForge(t interface {
	mock.TestingT
	Cleanup(func())
}) *SetupForge {
	mock := &SetupForge{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
