// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	types "github.com/crowci/crow/v3/server/services/encryption/types"
	mock "github.com/stretchr/testify/mock"
)

// EncryptionBuilder is an autogenerated mock type for the EncryptionBuilder type
type EncryptionBuilder struct {
	mock.Mock
}

// Build provides a mock function with given fields:
func (_m *EncryptionBuilder) Build() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Build")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// WithClient provides a mock function with given fields: client
func (_m *EncryptionBuilder) WithClient(client types.EncryptionClient) types.EncryptionBuilder {
	ret := _m.Called(client)

	if len(ret) == 0 {
		panic("no return value specified for WithClient")
	}

	var r0 types.EncryptionBuilder
	if rf, ok := ret.Get(0).(func(types.EncryptionClient) types.EncryptionBuilder); ok {
		r0 = rf(client)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(types.EncryptionBuilder)
		}
	}

	return r0
}

// NewEncryptionBuilder creates a new instance of EncryptionBuilder. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewEncryptionBuilder(t interface {
	mock.TestingT
	Cleanup(func())
}) *EncryptionBuilder {
	mock := &EncryptionBuilder{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
