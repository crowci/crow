// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	model "github.com/crowci/crow/v3/server/model"
	mock "github.com/stretchr/testify/mock"
)

// FilterFn is an autogenerated mock type for the FilterFn type
type FilterFn struct {
	mock.Mock
}

// Execute provides a mock function with given fields: _a0
func (_m *FilterFn) Execute(_a0 *model.Task) (bool, int) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Execute")
	}

	var r0 bool
	var r1 int
	if rf, ok := ret.Get(0).(func(*model.Task) (bool, int)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*model.Task) bool); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(*model.Task) int); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Get(1).(int)
	}

	return r0, r1
}

// NewFilterFn creates a new instance of FilterFn. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewFilterFn(t interface {
	mock.TestingT
	Cleanup(func())
}) *FilterFn {
	mock := &FilterFn{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
