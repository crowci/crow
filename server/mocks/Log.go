// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	logging "github.com/crowci/crow/v3/server/logging"
	mock "github.com/stretchr/testify/mock"

	model "github.com/crowci/crow/v3/server/model"
)

// Log is an autogenerated mock type for the Log type
type Log struct {
	mock.Mock
}

// Close provides a mock function with given fields: c, stepID
func (_m *Log) Close(c context.Context, stepID int64) error {
	ret := _m.Called(c, stepID)

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(c, stepID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Open provides a mock function with given fields: c, stepID
func (_m *Log) Open(c context.Context, stepID int64) error {
	ret := _m.Called(c, stepID)

	if len(ret) == 0 {
		panic("no return value specified for Open")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(c, stepID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Tail provides a mock function with given fields: c, stepID, handler
func (_m *Log) Tail(c context.Context, stepID int64, handler logging.LogChan) error {
	ret := _m.Called(c, stepID, handler)

	if len(ret) == 0 {
		panic("no return value specified for Tail")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, logging.LogChan) error); ok {
		r0 = rf(c, stepID, handler)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Write provides a mock function with given fields: c, stepID, entries
func (_m *Log) Write(c context.Context, stepID int64, entries []*model.LogEntry) error {
	ret := _m.Called(c, stepID, entries)

	if len(ret) == 0 {
		panic("no return value specified for Write")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, []*model.LogEntry) error); ok {
		r0 = rf(c, stepID, entries)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewLog creates a new instance of Log. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewLog(t interface {
	mock.TestingT
	Cleanup(func())
}) *Log {
	mock := &Log{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
