// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	types "github.com/crowci/crow/v3/server/services/encryption/types"
	mock "github.com/stretchr/testify/mock"
)

// EncryptionClient is an autogenerated mock type for the EncryptionClient type
type EncryptionClient struct {
	mock.Mock
}

// EnableEncryption provides a mock function with given fields:
func (_m *EncryptionClient) EnableEncryption() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for EnableEncryption")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MigrateEncryption provides a mock function with given fields: newEncryption
func (_m *EncryptionClient) MigrateEncryption(newEncryption types.EncryptionService) error {
	ret := _m.Called(newEncryption)

	if len(ret) == 0 {
		panic("no return value specified for MigrateEncryption")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(types.EncryptionService) error); ok {
		r0 = rf(newEncryption)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetEncryptionService provides a mock function with given fields: encryption
func (_m *EncryptionClient) SetEncryptionService(encryption types.EncryptionService) error {
	ret := _m.Called(encryption)

	if len(ret) == 0 {
		panic("no return value specified for SetEncryptionService")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(types.EncryptionService) error); ok {
		r0 = rf(encryption)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewEncryptionClient creates a new instance of EncryptionClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewEncryptionClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *EncryptionClient {
	mock := &EncryptionClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
