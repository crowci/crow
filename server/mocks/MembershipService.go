// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	forge "github.com/crowci/crow/v3/server/forge"
	mock "github.com/stretchr/testify/mock"

	model "github.com/crowci/crow/v3/server/model"
)

// MembershipService is an autogenerated mock type for the MembershipService type
type MembershipService struct {
	mock.Mock
}

// Get provides a mock function with given fields: ctx, _forge, u, org
func (_m *MembershipService) Get(ctx context.Context, _forge forge.Forge, u *model.User, org string) (*model.OrgPerm, error) {
	ret := _m.Called(ctx, _forge, u, org)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *model.OrgPerm
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, forge.Forge, *model.User, string) (*model.OrgPerm, error)); ok {
		return rf(ctx, _forge, u, org)
	}
	if rf, ok := ret.Get(0).(func(context.Context, forge.Forge, *model.User, string) *model.OrgPerm); ok {
		r0 = rf(ctx, _forge, u, org)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.OrgPerm)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, forge.Forge, *model.User, string) error); ok {
		r1 = rf(ctx, _forge, u, org)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMembershipService creates a new instance of MembershipService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMembershipService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MembershipService {
	mock := &MembershipService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
