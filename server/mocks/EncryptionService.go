// Code generated by mockery. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// EncryptionService is an autogenerated mock type for the EncryptionService type
type EncryptionService struct {
	mock.Mock
}

// Decrypt provides a mock function with given fields: ciphertext, associatedData
func (_m *EncryptionService) Decrypt(ciphertext string, associatedData string) (string, error) {
	ret := _m.Called(ciphertext, associatedData)

	if len(ret) == 0 {
		panic("no return value specified for Decrypt")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (string, error)); ok {
		return rf(ciphertext, associatedData)
	}
	if rf, ok := ret.Get(0).(func(string, string) string); ok {
		r0 = rf(ciphertext, associatedData)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(ciphertext, associatedData)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Disable provides a mock function with given fields:
func (_m *EncryptionService) Disable() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Disable")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Encrypt provides a mock function with given fields: plaintext, associatedData
func (_m *EncryptionService) Encrypt(plaintext string, associatedData string) (string, error) {
	ret := _m.Called(plaintext, associatedData)

	if len(ret) == 0 {
		panic("no return value specified for Encrypt")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (string, error)); ok {
		return rf(plaintext, associatedData)
	}
	if rf, ok := ret.Get(0).(func(string, string) string); ok {
		r0 = rf(plaintext, associatedData)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(plaintext, associatedData)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewEncryptionService creates a new instance of EncryptionService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewEncryptionService(t interface {
	mock.TestingT
	Cleanup(func())
}) *EncryptionService {
	mock := &EncryptionService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
