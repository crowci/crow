// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	cli "github.com/urfave/cli/v3"

	io "io"

	mock "github.com/stretchr/testify/mock"

	types "github.com/crowci/crow/v3/pipeline/backend/types"
)

// Backend is an autogenerated mock type for the Backend type
type Backend struct {
	mock.Mock
}

// DestroyStep provides a mock function with given fields: ctx, step, taskUUID
func (_m *Backend) DestroyStep(ctx context.Context, step *types.Step, taskUUID string) error {
	ret := _m.Called(ctx, step, taskUUID)

	if len(ret) == 0 {
		panic("no return value specified for DestroyStep")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *types.Step, string) error); ok {
		r0 = rf(ctx, step, taskUUID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DestroyWorkflow provides a mock function with given fields: ctx, conf, taskUUID
func (_m *Backend) DestroyWorkflow(ctx context.Context, conf *types.Config, taskUUID string) error {
	ret := _m.Called(ctx, conf, taskUUID)

	if len(ret) == 0 {
		panic("no return value specified for DestroyWorkflow")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *types.Config, string) error); ok {
		r0 = rf(ctx, conf, taskUUID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Flags provides a mock function with given fields:
func (_m *Backend) Flags() []cli.Flag {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Flags")
	}

	var r0 []cli.Flag
	if rf, ok := ret.Get(0).(func() []cli.Flag); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]cli.Flag)
		}
	}

	return r0
}

// IsAvailable provides a mock function with given fields: ctx
func (_m *Backend) IsAvailable(ctx context.Context) bool {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for IsAvailable")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context) bool); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Load provides a mock function with given fields: ctx
func (_m *Backend) Load(ctx context.Context) (*types.BackendInfo, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Load")
	}

	var r0 *types.BackendInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*types.BackendInfo, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *types.BackendInfo); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.BackendInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Name provides a mock function with given fields:
func (_m *Backend) Name() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Name")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// SetupWorkflow provides a mock function with given fields: ctx, conf, taskUUID
func (_m *Backend) SetupWorkflow(ctx context.Context, conf *types.Config, taskUUID string) error {
	ret := _m.Called(ctx, conf, taskUUID)

	if len(ret) == 0 {
		panic("no return value specified for SetupWorkflow")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *types.Config, string) error); ok {
		r0 = rf(ctx, conf, taskUUID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// StartStep provides a mock function with given fields: ctx, step, taskUUID
func (_m *Backend) StartStep(ctx context.Context, step *types.Step, taskUUID string) error {
	ret := _m.Called(ctx, step, taskUUID)

	if len(ret) == 0 {
		panic("no return value specified for StartStep")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *types.Step, string) error); ok {
		r0 = rf(ctx, step, taskUUID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// TailStep provides a mock function with given fields: ctx, step, taskUUID
func (_m *Backend) TailStep(ctx context.Context, step *types.Step, taskUUID string) (io.ReadCloser, error) {
	ret := _m.Called(ctx, step, taskUUID)

	if len(ret) == 0 {
		panic("no return value specified for TailStep")
	}

	var r0 io.ReadCloser
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *types.Step, string) (io.ReadCloser, error)); ok {
		return rf(ctx, step, taskUUID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *types.Step, string) io.ReadCloser); ok {
		r0 = rf(ctx, step, taskUUID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(io.ReadCloser)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *types.Step, string) error); ok {
		r1 = rf(ctx, step, taskUUID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WaitStep provides a mock function with given fields: ctx, step, taskUUID
func (_m *Backend) WaitStep(ctx context.Context, step *types.Step, taskUUID string) (*types.State, error) {
	ret := _m.Called(ctx, step, taskUUID)

	if len(ret) == 0 {
		panic("no return value specified for WaitStep")
	}

	var r0 *types.State
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *types.Step, string) (*types.State, error)); ok {
		return rf(ctx, step, taskUUID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *types.Step, string) *types.State); ok {
		r0 = rf(ctx, step, taskUUID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.State)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *types.Step, string) error); ok {
		r1 = rf(ctx, step, taskUUID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewBackend creates a new instance of Backend. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewBackend(t interface {
	mock.TestingT
	Cleanup(func())
}) *Backend {
	mock := &Backend{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
