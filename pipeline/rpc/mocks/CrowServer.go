// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	proto "github.com/crowci/crow/v3/pipeline/rpc/proto"
	mock "github.com/stretchr/testify/mock"
)

// CrowServer is an autogenerated mock type for the CrowServer type
type CrowServer struct {
	mock.Mock
}

// Done provides a mock function with given fields: _a0, _a1
func (_m *CrowServer) Done(_a0 context.Context, _a1 *proto.DoneRequest) (*proto.Empty, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Done")
	}

	var r0 *proto.Empty
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *proto.DoneRequest) (*proto.Empty, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *proto.DoneRequest) *proto.Empty); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.Empty)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *proto.DoneRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Extend provides a mock function with given fields: _a0, _a1
func (_m *CrowServer) Extend(_a0 context.Context, _a1 *proto.ExtendRequest) (*proto.Empty, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Extend")
	}

	var r0 *proto.Empty
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *proto.ExtendRequest) (*proto.Empty, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *proto.ExtendRequest) *proto.Empty); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.Empty)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *proto.ExtendRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Init provides a mock function with given fields: _a0, _a1
func (_m *CrowServer) Init(_a0 context.Context, _a1 *proto.InitRequest) (*proto.Empty, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Init")
	}

	var r0 *proto.Empty
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *proto.InitRequest) (*proto.Empty, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *proto.InitRequest) *proto.Empty); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.Empty)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *proto.InitRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Log provides a mock function with given fields: _a0, _a1
func (_m *CrowServer) Log(_a0 context.Context, _a1 *proto.LogRequest) (*proto.Empty, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Log")
	}

	var r0 *proto.Empty
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *proto.LogRequest) (*proto.Empty, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *proto.LogRequest) *proto.Empty); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.Empty)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *proto.LogRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Next provides a mock function with given fields: _a0, _a1
func (_m *CrowServer) Next(_a0 context.Context, _a1 *proto.NextRequest) (*proto.NextResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Next")
	}

	var r0 *proto.NextResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *proto.NextRequest) (*proto.NextResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *proto.NextRequest) *proto.NextResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.NextResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *proto.NextRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RegisterAgent provides a mock function with given fields: _a0, _a1
func (_m *CrowServer) RegisterAgent(_a0 context.Context, _a1 *proto.RegisterAgentRequest) (*proto.RegisterAgentResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for RegisterAgent")
	}

	var r0 *proto.RegisterAgentResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *proto.RegisterAgentRequest) (*proto.RegisterAgentResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *proto.RegisterAgentRequest) *proto.RegisterAgentResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.RegisterAgentResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *proto.RegisterAgentRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReportHealth provides a mock function with given fields: _a0, _a1
func (_m *CrowServer) ReportHealth(_a0 context.Context, _a1 *proto.ReportHealthRequest) (*proto.Empty, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for ReportHealth")
	}

	var r0 *proto.Empty
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *proto.ReportHealthRequest) (*proto.Empty, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *proto.ReportHealthRequest) *proto.Empty); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.Empty)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *proto.ReportHealthRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UnregisterAgent provides a mock function with given fields: _a0, _a1
func (_m *CrowServer) UnregisterAgent(_a0 context.Context, _a1 *proto.Empty) (*proto.Empty, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for UnregisterAgent")
	}

	var r0 *proto.Empty
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *proto.Empty) (*proto.Empty, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *proto.Empty) *proto.Empty); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.Empty)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *proto.Empty) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: _a0, _a1
func (_m *CrowServer) Update(_a0 context.Context, _a1 *proto.UpdateRequest) (*proto.Empty, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 *proto.Empty
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *proto.UpdateRequest) (*proto.Empty, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *proto.UpdateRequest) *proto.Empty); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.Empty)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *proto.UpdateRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Version provides a mock function with given fields: _a0, _a1
func (_m *CrowServer) Version(_a0 context.Context, _a1 *proto.Empty) (*proto.VersionResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Version")
	}

	var r0 *proto.VersionResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *proto.Empty) (*proto.VersionResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *proto.Empty) *proto.VersionResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.VersionResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *proto.Empty) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Wait provides a mock function with given fields: _a0, _a1
func (_m *CrowServer) Wait(_a0 context.Context, _a1 *proto.WaitRequest) (*proto.Empty, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Wait")
	}

	var r0 *proto.Empty
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *proto.WaitRequest) (*proto.Empty, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *proto.WaitRequest) *proto.Empty); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.Empty)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *proto.WaitRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mustEmbedUnimplementedCrowServer provides a mock function with given fields:
func (_m *CrowServer) mustEmbedUnimplementedCrowServer() {
	_m.Called()
}

// NewCrowServer creates a new instance of CrowServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCrowServer(t interface {
	mock.TestingT
	Cleanup(func())
}) *CrowServer {
	mock := &CrowServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
