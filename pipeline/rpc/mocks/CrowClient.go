// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"

	proto "github.com/crowci/crow/v3/pipeline/rpc/proto"
)

// CrowClient is an autogenerated mock type for the CrowClient type
type CrowClient struct {
	mock.Mock
}

// Done provides a mock function with given fields: ctx, in, opts
func (_m *CrowClient) Done(ctx context.Context, in *proto.DoneRequest, opts ...grpc.CallOption) (*proto.Empty, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Done")
	}

	var r0 *proto.Empty
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *proto.DoneRequest, ...grpc.CallOption) (*proto.Empty, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *proto.DoneRequest, ...grpc.CallOption) *proto.Empty); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.Empty)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *proto.DoneRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Extend provides a mock function with given fields: ctx, in, opts
func (_m *CrowClient) Extend(ctx context.Context, in *proto.ExtendRequest, opts ...grpc.CallOption) (*proto.Empty, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Extend")
	}

	var r0 *proto.Empty
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *proto.ExtendRequest, ...grpc.CallOption) (*proto.Empty, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *proto.ExtendRequest, ...grpc.CallOption) *proto.Empty); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.Empty)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *proto.ExtendRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Init provides a mock function with given fields: ctx, in, opts
func (_m *CrowClient) Init(ctx context.Context, in *proto.InitRequest, opts ...grpc.CallOption) (*proto.Empty, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Init")
	}

	var r0 *proto.Empty
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *proto.InitRequest, ...grpc.CallOption) (*proto.Empty, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *proto.InitRequest, ...grpc.CallOption) *proto.Empty); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.Empty)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *proto.InitRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Log provides a mock function with given fields: ctx, in, opts
func (_m *CrowClient) Log(ctx context.Context, in *proto.LogRequest, opts ...grpc.CallOption) (*proto.Empty, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Log")
	}

	var r0 *proto.Empty
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *proto.LogRequest, ...grpc.CallOption) (*proto.Empty, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *proto.LogRequest, ...grpc.CallOption) *proto.Empty); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.Empty)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *proto.LogRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Next provides a mock function with given fields: ctx, in, opts
func (_m *CrowClient) Next(ctx context.Context, in *proto.NextRequest, opts ...grpc.CallOption) (*proto.NextResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Next")
	}

	var r0 *proto.NextResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *proto.NextRequest, ...grpc.CallOption) (*proto.NextResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *proto.NextRequest, ...grpc.CallOption) *proto.NextResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.NextResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *proto.NextRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RegisterAgent provides a mock function with given fields: ctx, in, opts
func (_m *CrowClient) RegisterAgent(ctx context.Context, in *proto.RegisterAgentRequest, opts ...grpc.CallOption) (*proto.RegisterAgentResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RegisterAgent")
	}

	var r0 *proto.RegisterAgentResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *proto.RegisterAgentRequest, ...grpc.CallOption) (*proto.RegisterAgentResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *proto.RegisterAgentRequest, ...grpc.CallOption) *proto.RegisterAgentResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.RegisterAgentResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *proto.RegisterAgentRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReportHealth provides a mock function with given fields: ctx, in, opts
func (_m *CrowClient) ReportHealth(ctx context.Context, in *proto.ReportHealthRequest, opts ...grpc.CallOption) (*proto.Empty, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ReportHealth")
	}

	var r0 *proto.Empty
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *proto.ReportHealthRequest, ...grpc.CallOption) (*proto.Empty, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *proto.ReportHealthRequest, ...grpc.CallOption) *proto.Empty); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.Empty)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *proto.ReportHealthRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UnregisterAgent provides a mock function with given fields: ctx, in, opts
func (_m *CrowClient) UnregisterAgent(ctx context.Context, in *proto.Empty, opts ...grpc.CallOption) (*proto.Empty, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UnregisterAgent")
	}

	var r0 *proto.Empty
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *proto.Empty, ...grpc.CallOption) (*proto.Empty, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *proto.Empty, ...grpc.CallOption) *proto.Empty); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.Empty)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *proto.Empty, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, in, opts
func (_m *CrowClient) Update(ctx context.Context, in *proto.UpdateRequest, opts ...grpc.CallOption) (*proto.Empty, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 *proto.Empty
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *proto.UpdateRequest, ...grpc.CallOption) (*proto.Empty, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *proto.UpdateRequest, ...grpc.CallOption) *proto.Empty); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.Empty)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *proto.UpdateRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Version provides a mock function with given fields: ctx, in, opts
func (_m *CrowClient) Version(ctx context.Context, in *proto.Empty, opts ...grpc.CallOption) (*proto.VersionResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Version")
	}

	var r0 *proto.VersionResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *proto.Empty, ...grpc.CallOption) (*proto.VersionResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *proto.Empty, ...grpc.CallOption) *proto.VersionResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.VersionResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *proto.Empty, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Wait provides a mock function with given fields: ctx, in, opts
func (_m *CrowClient) Wait(ctx context.Context, in *proto.WaitRequest, opts ...grpc.CallOption) (*proto.Empty, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Wait")
	}

	var r0 *proto.Empty
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *proto.WaitRequest, ...grpc.CallOption) (*proto.Empty, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *proto.WaitRequest, ...grpc.CallOption) *proto.Empty); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.Empty)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *proto.WaitRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewCrowClient creates a new instance of CrowClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCrowClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *CrowClient {
	mock := &CrowClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
